<%#
Copyright 2011-2020, The Trustees of Indiana University and Northwestern
  University.  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.

You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  CONDITIONS OF ANY KIND, either express or implied. See the License for the
  specific language governing permissions and limitations under the License.
---  END LICENSE_HEADER BLOCK  ---
%>

<p class="muted">Drag files to reorder them.</p>

<% if @masterFiles.blank? %>
<div class="well">There are no media files</div>
<% else %>
<div id="mediaobject_structure">
  <ul class="header">
    <li>Type</li>
    <li>Section label</li>
    <li>File name</li>
    <li>Size</li>
    <li>Structure</li>
    <li>Captions</li>
    <li>Files</li>
  </ul>
  <ul class="sortable">
    <% @masterFiles.each_with_index do |section, index| %>
    <li class="section" data-segment="<%= section.id %>">
      <ul class="fileinfo">
        <li>
          <% case section.file_format
               when 'Sound' %>
          <i class="fa fa-volume-up"></i>
          <% when 'Moving image' %>
          <i class="fa fa-film"></i>
          <% else %>
          <i class="fa fa-question-sign"></i>
          <% end %>
        </li>
        <li>
          <%= section.title.blank? ? '&#8212;'.html_safe : section.title %>
        </li>
        <li class="mediaobject-filename">
          <% if section.file_location.present? %>
          <%= truncate_center(File.basename(section.file_location.to_s), 50, 20) %>
          <% else %>
          -
          <% end %>
        </li>
        <li>
          <%= number_to_human_size(section.file_size) %>
        </li>
        <li>
          <a class="structure_toggle" data-target="structure_<%= index %>">
            <i class="fa fa-plus-square"></i>
            <i class="fa fa-minus-square hidden"></i>
          </a>
        </li>
        <li>
          <a class="captions_toggle" data-target="captions_<%= index %>">
            <i class="fa fa-plus-square"></i>
            <i class="fa fa-minus-square hidden"></i>
          </a>
        </li>
        <li>
          <a class="files_toggle" data-target="files_<%= index %>">
            <i class="fa fa-plus-square"></i>
            <i class="fa fa-minus-square hidden"></i>
          </a>
        </li>
      </ul>
      <div id="structure_<%= index %>" class="hidden structure_tool">
        <div class="tool_actions">
          <span class="tool_label">Structure</span>
          <%= form_for section, :url => attach_structure_master_file_path(section.id), html: {method: "post"} do |form| %>
          <%= form.file_field :structure, class: "filedata", style: "height:0px;width:0px;" %>
          <% item_label=html_escape(stream_label_for(section)) %>
          <% stream_url=hls_manifest_master_file_url(section.id, quality: 'auto') %>
          <div class="btn-toolbar">
            <input type="button" class="btn btn-primary btn-xs"
              onclick="$('#structure_<%= index %> .filedata').click();" value="Upload" />
            <div class="btn-group">
              <% if section.structuralMetadata.valid? %>
              <%= react_component("ReactButtonContainer", {sectionIndex: index, masterFileID: section.id, baseURL: request.protocol+request.host_with_port, streamDuration: section.duration, audioStreamURL: stream_url, initStructure: section.structuralMetadata.as_json}) %>
              <% else %>
              <%= react_component("ReactButtonContainer", {sectionIndex: index, masterFileID: section.id, baseURL: request.protocol+request.host_with_port, streamDuration: section.duration, audioStreamURL: stream_url, initStructure: "{ \"label\": \"#{item_label}\", \"type\": \"div\", \"items\": [] }"}, html_options={ class: 'react-button-container' }) %>
              <% end %>
            </div>
            <input type="button" class='btn btn-primary btn-xs' value="Advanced Edit" data-toggle="modal"
              data-target="#advanced_edit_structure_<%= index %>" />
            <input type="submit" class="btn btn-danger btn-xs" value="Remove" />
          </div>
          <% end %>
        </div>
        <div class="structure_view"></div>
        <div style="margin-top: 5px; font-style: italic;">
          Note: Any edits made with the Edit Structure tool will not be reflected here or in the Advanced Edit tool
          until this page is refreshed.
        </div>
      </div>
      <div id="captions_<%= index %>" class="hidden structure_tool">
        <div class="tool_actions">
          <span class="tool_label">Captions</span>
          <%= form_for section, :url => attach_captions_master_file_path(section.id), html: {method: "post"} do |form| %>
          <%= form.file_field :captions, class: "filedata", style: "height:0px;width:0px;" %>
          <input type="button" class="btn btn-primary btn-xs" onclick="$('#captions_<%= index %> .filedata').click();"
            value="Upload" />
          <input type="submit" class="btn btn-danger btn-xs" value="Remove" />
          <% end %>
        </div>
        <% if section.captions.present? %>
        <div class="structure_view">Uploaded file: <%= section.captions.original_name %></div>
        <% end %>
      </div>
      <div id="files_<%= index %>" class="hidden structure_tool">
        <div class="tool_actions">
          <span class="tool_label">Files</span>
          <%= form_for section, :url => attach_captions_master_file_path(section.id), html: {method: "post"} do |form| %>
          <%= form.file_field :captions, class: "filedata", style: "height:0px;width:0px;" %>
          <input type="button" class="btn btn-primary btn-xs" onclick="$('#files_<%= index %> .filedata').click();"
            value="Upload" />
          <input type="submit" class="btn btn-danger btn-xs" value="Remove" />
          <% end %>
        </div>
        <% if section.captions.present? %>
        <div class="structure_view">Uploaded file: <%= section.captions.original_name %>
          <input type="submit" class="btn btn-danger btn-xs" value="Remove" /></div>
        <% end %>
      </div>
    </li>
    <% end %>
  </ul>
</div>

<div />
<br class="clear" />
<%= bootstrap_form_for @media_object, html: { class: "form-horizontal" } do |media| %>
<%= render "workflow_buttons" %>
<% end %>

<% @masterFiles.each_with_index do |section, index| %>
<% default_structure="<Item label='#{html_escape(stream_label_for(section))}'></Item>" %>
<div id="advanced_edit_structure_<%= index %>" class="structure_edit modal fade" data-backdrop="false"
  data-submit_url="<%= attach_structure_master_file_path(section.id) %>">
  <div class="modal-dialog modal-lg">
    <div class="modal-content col-md-12">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title">Advanced Edit Structure</h4>
      </div>
      <div class="modal-body structure_edit col-md-12">
        <textarea rows=20 class="col-md-12 original_textarea" id="structure_<%= index %>"
          style="visibility:hidden"><%= section.structuralMetadata.valid? ? section.structuralMetadata.to_xml : default_structure %></textarea>
      </div>
    </div>
  </div>
</div>
<% end %>
<% end %>

<% content_for :page_scripts do %>

<script>
  function htmlDecode(value) {
    return $('<div/>').html(value).text();
  }

  function parse_structure(xml, index) {
    var $xml = $($.parseXML(xml));
    var $item = $xml.find("Item");
    if ($item.length) {
      if ($item.children().length) return "<span>" + $item.attr('label') + "</span><ul>" + parse_section($item.first(),
        index)[0] + "</ul>";
      else return "<span>" + (index + 1) + ". " + $item.attr('label') + "</span>";
    } else return "";
  }

  function parse_section(node, index) {
    var contents = '';
    var tracknumber;
    var nodecontents;
    if (node.children().length) {
      tracknumber = 0;
      $.each(node.children(), function (index, node) {
        nodecontents = parse_node(node, tracknumber);
        contents += nodecontents[0];
        tracknumber = nodecontents[1];
      });
    } else {
      nodecontents = parse_node(node.first, index);
      contents = nodecontents[0];
      tracknumber = nodecontents[1];
    }
    return [contents, tracknumber];
  }

  function parse_node(node, tracknumber) {
    if (node.nodeName.toUpperCase() == "DIV") {
      var contents = ''
      $.each($(node).children(), function (index, node) {
        var nodecontents = parse_node(node, tracknumber);
        contents += nodecontents[0];
        tracknumber = nodecontents[1];
      });
      return ["<li>" + $(node).attr('label') + "</li><li><ul>" + contents + "</ul></li>", tracknumber];
    } else if ($.inArray(node.nodeName.toUpperCase(), ['SPAN', 'ITEM']) != -1) {
      tracknumber += 1;
      return ["<li class='stream-li'>" + tracknumber + ". " + $(node).attr('label') + "</li>", tracknumber];
    } else {
      return ["", tracknumber];
    }
  }

  $('.structure_toggle').on('click', function (e) {
    e.preventDefault();
    $(this).find('i.fa').toggleClass('hidden');
    target = $(this).data('target')
    section_index = parseInt(target.split('_')[1]);
    populate_structure_preview(section_index)
    $('#' + target).toggleClass('hidden');
  });

  $('.captions_toggle').on('click', function (e) {
    e.preventDefault();
    $(this).find('i.fa').toggleClass('hidden');
    target = $(this).data('target')
    $('#' + target).toggleClass('hidden');
  });

    $('.files_toggle').on('click', function (e) {
    e.preventDefault();
    $(this).find('i.fa').toggleClass('hidden');
    target = $(this).data('target')
    $('#' + target).toggleClass('hidden');
  });

  $('.filedata').change(function () {
    $(this).closest('form').submit();
  });

  function populate_structure_preview(index) {
    $xmltextarea = $('#advanced_edit_structure_' + index).find('textarea.original_textarea');
    $('#structure_' + index).find('.structure_view').html(parse_structure(htmlDecode($xmltextarea.html()), index));
  }

  function attach_structure_response(r) {
    if (r['flash'] && r['flash'].length) {
      msg = ''
      for (var i = 0; i < r['flash'].length; i++) {
        for (var j = 0; j < r['flash'][i][1].length; j++) {
          msg += r['flash'][i][1][j] + '<br/>';
        }
      }
      return msg;
    } else {
      current_xml_editor.find('textarea.original_textarea').html(r['structure']);
      section_index = parseInt(current_xml_editor.attr('id').split('_').pop());
      populate_structure_preview(section_index);
      current_xml_editor.modal('hide');
      current_xml_editor = null;
    }
  }

  var current_xml_editor;
  var extractor = new Xsd2Json('avalon_structure.xsd', {
    'schemaURI': '/',
    'rootElement': 'item'
  });
  $('.structure_edit.modal').on('shown.bs.modal', function () {
    modal = $(this);
    current_xml_editor = modal;
    te = modal.find('.original_textarea').first();
    footer = modal.find('.modal-footer').first();
    mb = modal.find('.modal-body').first();
    te.height($(window).height() + modal.offset().top - te.offset().top - footer.height() - (mb.outerHeight() - mb
      .height()));
    if (modal.find('.xml_editor_container').length == 0) {
      te.xmlEditor({
        schema: extractor.getSchema(),
        floatingMenu: false,
        confirmExitWhenUnsubmitted: false,
        loadSchemaAsychronously: false,
        xmlEditorLabel: 'Graphical',
        textEditorLabel: 'Raw XML',
        containerElement: {
          element: mb,
          fixedHeight: true,
        },
        submitButtonConfigs: [{
          url: $(this).data('submit_url'),
          responseHandler: attach_structure_response,
          label: 'Save and Exit',
          cssClass: 'btn btn-primary section_edit_submit',
        }],
        defaultView: 'text',
      });
    }
  });
</script>
<% end %>
