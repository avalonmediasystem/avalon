version: 2.1
orbs:
  samvera: samvera/circleci-orb@1
jobs:
  build:
    docker:
      # Primary container image where all steps run.
      - image: avalonmediasystem/avalon:7.5.0-dev-ruby3
        environment:
          - DATABASE_URL=postgresql://postgres@localhost:5432/postgres
          - FEDORA_URL=http://localhost:8080/fcrepo/rest
          - FEDORA_TIMEOUT=300
          - RAILS_ENV=test
      # Secondary container image on common network.
      - image: postgres:10-alpine
        environment:
          - POSTGRES_USER=postgres
          - POSTGRES_DB=avalon
          - POSTGRES_PASSWORD=password
      - image: ualbertalib/docker-fcrepo4:4.7
        environment:
          CATALINA_OPTS: '-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC'
      - image: zookeeper:3.4
      - image: solr:8-slim
        environment:
          VERBOSE: yes
          SECURITY_JSON: '{"authentication":{"blockUnknown": false, "class":"solr.BasicAuthPlugin", "credentials":{"solr":"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0= Ndd7LKvVBAaZIF0QAVi1ekCfAJXr1GGfLtRUXhgrF8c="}, "realm":"My Solr users", "forwardCredentials": false}, "authorization":{ "class":"solr.RuleBasedAuthorizationPlugin", "permissions":[{"name":"security-edit", "role":"admin"}], "user-role":{"solr":"admin"}}}'
        command: sh -c "server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:2181 -cmd put /security.json \"${SECURITY_JSON}\" && solr-fg -cloud -noprompt  -p << parameters.solr_port >> -z localhost:2181"
      - image: redis:alpine

    parameters:
      ruby_ver:
        description: 'Ruby version'
        default: '3.1'
        type: 'string'
      solr_port:
        type: string
        default: '8985'
      parallelism:
        type: integer
        default: 4
      solr_config_path:
        type: string
        default: 'solr/conf'
      core_name:
        type: string
        default: 'hydra-test'

    working_directory: /home/app/avalon

    parallelism: << parameters.parallelism >>

    steps:
      - run:
          name: Clean out existing code
          command: rm -rf .[!.]* *

      - run: git config --global --add safe.directory /home/app/avalon

      - samvera/cached_checkout

      - run: cp config/controlled_vocabulary.yml.example config/controlled_vocabulary.yml

      - run:
          command: |
            unset BUNDLE_APP_CONFIG
            bundle install --with aws development test postgres --without production --jobs=4 --retry=3
            bundle exec rake db:migrate

      - restore_cache:
          keys:
            - yarn-cache-v1-{{ arch }}-{{ checksum "yarn.lock" }}

      - run: yarn

      - save_cache:
          key: yarn-cache-v1-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - .cache/yarn

      # Copy solr 8 compliant step from unreleased version of orb
      #- samvera/install_solr_core:
      #    solr_config_path: << parameters.solr_config_path >>
      - run:
          name: Wait for Solr
          command: dockerize -wait tcp://localhost:<< parameters.solr_port >> -timeout 1m
      - run:
          name: Create solr core
          command: |
            if [ -d << parameters.solr_config_path >> ]
            then
              cd << parameters.solr_config_path >>
            else
              if [ -d "$(bundle show active-fedora)/lib/generators/active_fedora/config/solr/templates/solr/conf" ]
              then
                cd "$(bundle show active-fedora)/lib/generators/active_fedora/config/solr/templates/solr/conf"
              else
                cd "$(bundle show active-fedora)/lib/generators/active_fedora/config/solr/templates/solr/config"
              fi
            fi
            zip -1 -r solr_conf.zip ./*
            curl -H "Content-type:application/octet-stream" --data-binary @solr_conf.zip "http://solr:SolrRocks@127.0.0.1:<< parameters.solr_port >>/solr/admin/configs?action=UPLOAD&name=solrconfig"
            curl -H 'Content-type: application/json' http://solr:SolrRocks@127.0.0.1:<< parameters.solr_port >>/api/collections/ -d '{create: {name: << parameters.core_name >>, config: solrconfig, numShards: 1}}'

      - run:
          command: |
            if [[ $(command -v cc-test-reporter) == "" ]]; then
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
            fi
      - run:
          command: ./cc-test-reporter before-build

      # Pull in the parallel_rspec step and modify it to ensure that test results get stored
      # - samvera/parallel_rspec
      - run:
          name: Run rspec in parallel
          command: |
            mkdir /tmp/test-results
            bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec.xml $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          command: ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json

  upload-coverage:
    parameters:
      parallelism:
        type: integer
        default: 4
    docker:
      # Primary container image where all steps run.
      - image: avalonmediasystem/avalon:7.5.0-dev-ruby3

    working_directory: /home/app/avalon

    steps:
      - attach_workspace:
          at: /home/app/avalon

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - deploy:
          # CC_TEST_REPORTER_ID set within the circleci web interface
          command: ./cc-test-reporter sum-coverage --output - --parts << parameters.parallelism >> codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -

workflows:
  version: 2
  build_test_report:
    jobs:
      - build:
          ruby_ver: '3.2'
          name: 'Ruby3-2'
          parallelism: 4
      - upload-coverage:
          parallelism: 4
          requires:
            - Ruby3-2
