require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/checkouts", type: :request do

  let(:user) { FactoryBot.create(:user) }
  let(:media_object) { FactoryBot.create(:published_media_object, visibility: 'public') }
  let(:checkout) { FactoryBot.create(:checkout, user: user, media_object_id: media_object.id) }

  # This should return the minimal set of attributes required to create a valid
  # Checkout. As you add validations to Checkout, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { media_object_id: media_object.id }
  }

  let(:invalid_attributes) {
    { media_object_id: 'fake-id' }
  }

  before { sign_in(user) }

  describe "GET /index" do
    before { checkout }

    it "renders a successful response" do
      get checkouts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get checkout_url(checkout, format: :json)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Checkout" do
        expect {
          post checkouts_url, params: { checkout: valid_attributes, format: :json }
        }.to change(Checkout, :count).by(1)
      end

      it "redirects to the created checkout" do
        post checkouts_url, params: { checkout: valid_attributes, format: :json }
        expect(response).to be_created
      end
    end

    context "with invalid parameters" do
      it "does not create a new Checkout" do
        expect {
          post checkouts_url, params: { checkout: invalid_attributes, format: :json }
        }.to change(Checkout, :count).by(0)
      end

      it "returns 404 because the media object cannot be found" do
        post checkouts_url, params: { checkout: invalid_attributes, format: :json }
        expect(response).to be_not_found
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_return_time) { DateTime.now + 3.weeks }
      let(:new_attributes) {
        { return_time: new_return_time }
      }
      let(:invalid_new_attributes) {}

      it "updates the requested checkout" do
        patch checkout_url(checkout), params: { checkout: new_attributes, format: :json }
        checkout.reload
        checkout.return_time = new_return_time
      end

      it "redirects to the checkout" do
        patch checkout_url(checkout), params: { checkout: new_attributes, format: :json }
        checkout.reload
        expect(response).to be_ok
      end
    end

    context "with invalid parameters" do
      xit "returns a 422 Unprocessable entity" do
        patch checkout_url(checkout), params: { checkout: invalid_new_attributes, format: :json }
        expect(response).to be_unprocessable_entity
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested checkout" do
      # Make sure the checkout is created before the expect line below
      checkout
      expect {
        delete checkout_url(checkout)
      }.to change(Checkout, :count).by(-1)
    end

    it "redirects to the checkouts list" do
      delete checkout_url(checkout)
      expect(response).to redirect_to(checkouts_url)
    end
  end

  describe 'DELETE #destroy_all' do
    before :each do
      FactoryBot.reload
      FactoryBot.create_list(:checkout, 2)
    end
    context 'as a regular user' do
      it "deletes the current user's checkouts" do
        checkout
        delete checkouts_url
        expect(Checkout.all.count).to eq(2)
      end
      
      it "redirects to the checkouts list" do
        delete checkout_url(checkout)
        expect(response).to redirect_to(checkouts_url)
      end
    end
    context 'as an admin user' do
      let(:admin) { FactoryBot.create(:admin) }
      before { sign_in admin }

      it 'deletes all checkouts' do
        delete checkouts_url
        expect(Checkout.all.count).to eq(0)
      end

      it "redirects to the checkouts list" do
        delete checkout_url(checkout)
        expect(response).to redirect_to(checkouts_url)
      end
    end
  end
end
